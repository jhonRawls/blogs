{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"Eureka","text":"eureka是什么 eureka是Netflix开源的服务注册于发现的组件,Spring Cloud体系中集成了Eureka(拿来主义),Eureka又可以细分为两个,一个是Eureka Server,一个是Eureka Client.想象一下如果没有eureka注册中心,各个服务的地址,服务的上线和下线的状态配置在每个服务端,服务之间的续约全部配置在客户端硬性编码,这种配置会极大的影响服务的可伸缩性,不利于服务的快速的扩展。 eureka怎么用为了快速展示demo,可以从start.spring.io导出项目,添加eureka server(eureka service) 或者Eureka Discovery(eureka client)依赖即可,默认导出的项目中没有包含配置文件,我们在resources文件夹中添加application.yml配置文件(spring 的项目遵循约定由于配置的设计范式,启动的时候会扫描resources文件夹下相关的配置文件,并且注入属性) Eureka ServerEurekaApplication启动类上面增加注解@EnableEurekaServer来表示该服务是注册中心服务 1234567@EnableEurekaServer@SpringBootApplicationpublic class EurekaApplication { public static void main(String[] args) { SpringApplication.run(EurekaApplication.class, args); }} application.yml文件中增加如下配置信息,为了避免报错(单机版)先将这些属性禁用123456eureka: client: #默认情况下服务会将自己注册到eureka注册中心 register-with-eureka: false #从eureka注册中心同步注册信息 fetch-registry: false 这样一个简单的eureka 服务就搭建好了。 Eureka ClientEurekaClientApplication启动类增加注解@EnableDiscoveryClient来表示开启服务发现功能,从Spring Cloud Edgware开始，@EnableDiscoveryClient 或@EnableEurekaClient 可省略。只需加上相关依赖，并进行相应配置，即可将微服务注册到服务发现组件上。1234567@SpringBootApplication@EnableDiscoveryClient(可省略-版本有关)public class EurekaClientApplication { public static void main(String[] args) { SpringApplication.run(EurekaClientApplication.class, args); }} 123456application.yml文件中增加如下配置信息eureka: client: serviceUrl: #eureka注册中心地址 defaultZone: http://127.0.0.1:10080/eureka/ 这样一个简单的eureka客户端服务就搭建好了。 eureka怎么用好在生产环境中eureka为了高可用一般会搭建集群,之前由于eureka是单机版本的所以不需要将自己注册到注册中心,也不需要从服务器获取清单,如果是集群的环境需要将这两个(register-with-eureka、fetch-registry)配置的属性改成true,或者不配置(默认为true),eureka的集群是通过副本的形式相互注册,相互同步信息来实现高可用的,具体可以参考官方给出的架构图。 eureka高可用其实eureka的高可用是采取服务之间采取相互注册组成的集群,eureka之间是对等的,其中的服务注册信息会定时通过心跳在副本之间同步。将此属性移除,因为需要相互注册并且需要从相邻的副本同步信息123456eureka: client: #默认情况下服务会将自己注册到eureka注册中心 register-with-eureka: false #从eureka注册中心同步注册信息 fetch-registry: false 增加以下属性1234eureka: client: service-url: defaultZone: http://127.0.0.1:10082/eureka/ 这样我们就可以看到eureka集群搭建好了,如图所示 最后附上相关的代码 [demo地址]https://github.com/jhonRawls/spring_cloud_demo如有疑问,可以在下面评论区参与评论。 相关资料 [1]：https://start.spring.io/ [2]：https://github.com/Netflix/eureka [3]：https://spring.io/guides/gs/service-registration-and-discovery/ [4]：https://cloud.spring.io/spring-cloud-netflix/multi/multi__service_discovery_eureka_clients.html","link":"/2019/05/16/eureka/"},{"title":"Spring Cloud","text":"Spring Cloud简介Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。 这是官方的解释，个人觉得Spring Cloud是一套开箱即用的工具集合，在分布式开发和微服务理念大行其道的今天，为快速开发提供了非常好的解决方案。 Spring Cloud 和 Spring Boot 的关系Spring Cloud是一个体系,为服务治理提供了一整个套解决方案,Spring Boo是一个专注于快速开发的脚手架,通过maven引入各种所需要的jar包,甚至可以不需要配置xml文件,通过yml(推荐)配置文件设置各种配置,一般来说基于Spring Boot的项目xml文件很少。想一想以前Spring Boot出现之前要搭建一个Spring Mvc项目在配置的xml文件…. Spring Cloud 和 Netflix 的关系我们看到Spring Cloud中有很多Netflix的包,是因为Netflix开源了很多微服务的组件,这些组件经过Netflix生产环境的大规模实践,Spring Cloud把它集成过来纳入麾下,例如：注册中心(Eureka)、断路器(Hystrix)、智能路由(Zuul)、客户端的负载均衡器(Ribbion),不得不说Spring Cloud真的会借鉴…. Spring Cloud核心组件Eureka注册中心:服务的注册和发现,服务之间的续约等。 Spring Cloud Config配置中心：通过和git或者svn集成,对配置文件进行统一管理。 Zuul智能路由：通过不同的策略转发到不同的服务,一般用来做网关。 Ribbion客户端负载均衡：客户端的的负载均衡器,通过客户端的负载均衡算法来调用远程的服务。 Feign声明式编程:微服务必然是分布式的调用,Feign可以像调用本地函数一样调用远程的服务。 Hystrix熔断器：对外提供优雅的容错服务,例如服务过载、快速失败响应。 以上就是Spring Cloud的核心组件基本上了解了以上几个组件,就可以搭建一个微服务的demo了,可以满足常用的业务需求了。 Spring Cloud 组件的替代方案最近几年Spring Cloud可以说是大火,其实之前阿里的Dubbo也是蛮不错的,应该来说在16年之前国内的蛮多互联网公司还是基于阿里的Dubbo做分布式开发,后来由于阿里的断更,加上Spring Cloud有是亲儿子,提供的解决方案也很完善,所以逐渐的流行起来了,不过最近阿里的Dubbo又开始更新了,也相继推出来Spring Cloud Alibaba,Nacos逐步的在追赶。 Eureka 可以用 Nacos、consul、zookeeper Spring Cloud Config可以用携程开源的Apoll Zuul 作为网关可以用Kong、Spring Cloud Gateway","link":"/2019/05/15/spring-cloud/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/05/14/hello-world/"},{"title":"Feign","text":"这篇主要介绍Spring Cloud体系中的Feign组件 http://www.itmuch.com/spring-cloud/finchley-9/","link":"/2019/05/22/feign/"}],"tags":[{"name":"Spring Cloud","slug":"Spring-Cloud","link":"/tags/Spring-Cloud/"},{"name":"Eureka","slug":"Eureka","link":"/tags/Eureka/"},{"name":"Feign","slug":"Feign","link":"/tags/Feign/"}],"categories":[{"name":"Spring Cloud","slug":"Spring-Cloud","link":"/categories/Spring-Cloud/"}]}